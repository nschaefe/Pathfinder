(NOT UP TO DATE)
There are several things that can be configured and have an influence on runtime performance and tracking outputs.
Some of them include interventions in sensitive code (e.g. classloader). In case of problems, switching them off can be
a starting point for debugging.

-Task pause and resume:
To shut down tracking in irrelevant parts of the application a task can be paused and resumed later on.
Currently this is done when classes are loaded and instrumented. Accesses to any fields and arrays while the classloading
process is not tracked. This is achieved by pausing the current task and bring it back after the classloading call.
To realize this feature, the rt.jar is instrumented. The class java.lang.ClassLoader is instrumented. This is done in RTInstrumentation.
This feature provides performance improvements and less tracking outputs that are irrelevant.
This feature can be switched off by disabling the corresponding part in RTInstrumentation, or the code behind pause and resume.

-Dynamic vs static instrumentation:
Parts of the instrumentation is possible to do statically. Currently there is support to instrument the rt.jar statically
and to statically instrument application code that is not a dependency.
In principle it is possible to instrument everything dynamically, but because of overhead this is not feasible.
To turn on static instrumentation the javaRT project needs to be executed to generate a new rt.jar. This rt_inst.jar has to
be included in the bootstrapclasspath of the JVM.
To instrument application code statically, the javassist maven plugin is required. The hbase pom includes this plugin.
There is a property to switch on/off the plugin.
One should not instrument statically instrumented classes again at runtime.
So the javaagent should exclude corresponding classes.

-Instrumentation Blacklisting
In Agent.java certain classes can be excluded from being instrumented (EXCLUDES)

-Report Logging
TinyLog is used to print out tracking results.
The logger can be configured.
Using "writingthread" and "buffered" improves performance but introduces more memory consumption
Even without "buffered", the writing thread buffers things if it is not able to process outputs fast enough. This can lead
to a significant blow up in memory.

-Logged Stacktraces
In ReportGenerator the stacktrace length beginning from the first element (most recent in call hirachy) can be set (STACKTRACE_MAX_DEPTH)
To filter out the stacktrace elements that belong to the tracking framework the CLASS_PREFIX can be defined to exclude elements that start with this prefix

-Hook Size
Which accesses are tracked has a crucial impact on performance. Not tracking byte array accesses for example leads to a
better performance if output streams etc. are used in the applications.

